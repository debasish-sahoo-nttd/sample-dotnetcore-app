
# trigger:
#   branches:
#     include:
#       - main

resources:
  repositories:
    - repository: ado-utils
      type: github
      name: 'launchbynttdata/lcaf-component-provider_az-pipeline_azdo'
      ref: feature/1456
      endpoint: 'launchbynttdata-github-token'

trigger: none

parameters:
  - name: serviceConnection
    type: string
    default: 'ado-sp'
  - name: agentPool
    type: string
    default: 'container-pool'
  - name: dockerImageName
    type: string
    default: 'sample-dotnetcore-app'
  - name: dockerRegistry
    type: string
    default: 'dsopublic.azurecr.io'
  - name: aksResourceGroup
    type: string
    default: 'dso-k8s-001'
  - name: aksCluster
    type: string
    default: 'dso-ado-k8s-dev-001-aks'
  - name: helmChart
    type: string
    default: 'dotnet-app'
  - name: helmChartVersion
    type: string
    default: '0.1.0'
  - name: acrName
    type: string
    default: 'dsopublic.azurecr.io'
  - name: imageTag
    type: string
    default: ''


stages:
  - stage: BuildAndPush
    displayName: 'Build and Push Docker Image'
    jobs:
      - job: BuildAndPushJob
        displayName: 'Build and Push'
        pool: ${{ parameters.agentPool }}
        steps:
          #- checkout: self
          - task: AzureCLI@2
            displayName: 'Build and Push Docker Image'
            inputs:
              azureSubscription: ${{ parameters.serviceConnection }}
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo 'Building and pushing Docker image: ${{ parameters.dockerImageName }}:$(Build.BuildId)'
                az acr build --image ${{ parameters.dockerImageName }}:$(Build.BuildId) --registry ${{ parameters.dockerRegistry }} --file Dockerfile .

  - stage: PreDeployDev
    displayName: 'Dev - Pre deploy'
    dependsOn: BuildAndPush
    # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      - name: deployEnv
        value: 'dev'
      - name: namespace
        value: 'dev'
      - name: releaseName
        value: 'sample'
    jobs:
      - job: PreDeployDevJob
        displayName: 'Dev - Pre deploy'
        pool: ${{ parameters.agentPool }}
        workspace:
          clean: all
        steps:
          - checkout: self
          - checkout: 'ado-utils'
          - template: templates/steps/helm-diff.yaml
            parameters:
              serviceConnection: ${{ parameters.serviceConnection }}
              namespace: $(namespace)
              releaseName: $(releaseName)
              acrName: ${{ parameters.acrName }}
              imageTag: ${{ parameters.imageTag }}
              deployEnv: $(deployEnv)
              helmChart: ${{ parameters.helmChart }}
              helmChartVersion: ${{ parameters.helmChartVersion }}
              additionalSteps:
                - template: templates/steps/asdf-install.yaml
                  parameters:
                    pluginName: 'helm-diff'
                    pluginVersion: '3.9.5'
                - template: templates/steps/get-kubernetes-credentials.yaml
                  parameters:
                    serviceConnection: ${{ parameters.serviceConnection }}
                    aksResourceGroup: ${{ parameters.aksResourceGroup }}
                    aksCluster: ${{ parameters.aksCluster }}
                - template: templates/steps/helm-acr-login.yaml
                  parameters:
                    serviceConnection: ${{ parameters.serviceConnection }}
                    acrName: ${{ parameters.acrName }}
  - stage: DeployDev
    displayName: 'Deploy to Dev'
    dependsOn: PreDeployDev
    # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      - name: deployEnv
        value: 'dev'
      - name: namespace
        value: 'dev'
      - name: releaseName
        value: 'sample'
    jobs:
      - deployment: DeployDevJob
        displayName: 'Deploy to Dev'
        pool: ${{ parameters.agentPool }}
        workspace:
          clean: all
        environment: ${{ parameters.dockerImageName }}-dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: 'ado-utils'
                - template: templates/steps/helm-upgrade.yaml
                  parameters:
                    serviceConnection: ${{ parameters.serviceConnection }}
                    namespace: $(namespace)
                    releaseName: $(releaseName)
                    acrName: ${{ parameters.acrName }}
                    imageTag: ${{ parameters.imageTag }}
                    deployEnv: $(deployEnv)
                    helmChart: ${{ parameters.helmChart }}
                    helmChartVersion: ${{ parameters.helmChartVersion }}
                    additionalSteps:
                      - template: templates/steps/verify-ado-agent.yaml
                      - template: templates/steps/get-kubernetes-credentials.yaml
                        parameters:
                          serviceConnection: ${{ parameters.serviceConnection }}
                          aksResourceGroup: ${{ parameters.aksResourceGroup }}
                          aksCluster: ${{ parameters.aksCluster }}
                      - template: templates/steps/helm-acr-login.yaml
                        parameters:
                          serviceConnection: ${{ parameters.serviceConnection }}
                          acrName: ${{ parameters.acrName }}       
  - stage: DeployTest
    displayName: 'Deploy to Test'
    dependsOn: DeployDev
    condition: false
    jobs:
      - deployment: DeployTestJob
        displayName: 'Deploy to Test'
        pool: ${{ parameters.agentPool }}
        environment: ${{ parameters.dockerImageName }}-test
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    # Add deployment steps for test environment
                  displayName: 'Deploy to Test'

  - stage: DeployUAT
    displayName: 'Deploy to UAT'
    dependsOn: DeployTest
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployUATJob
        displayName: 'Deploy to UAT'
        pool: ${{ parameters.agentPool }}
        environment: ${{ parameters.dockerImageName }}-uat
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    # Add deployment steps for UAT environment
                  displayName: 'Deploy to UAT'

  - stage: DeployProd
    displayName: 'Deploy to Prod'
    dependsOn: DeployUAT
    condition: false
    jobs:
      - deployment: DeployProdJob
        displayName: 'Deploy to Prod'
        pool: ${{ parameters.agentPool }}
        environment: ${{ parameters.dockerImageName }}-prod
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    # Add deployment steps for prod environment
                  displayName: 'Deploy to Prod'