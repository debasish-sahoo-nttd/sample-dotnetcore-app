
# trigger:
#   branches:
#     include:
#       - main

resources:
  repositories:
    - repository: properties
      type: github
      name: 'debasish-sahoo-nttd/sample-dotnetcore-app-properties'
      ref: main
      endpoint: 'dsahoo-nttd-pat'

trigger: none

parameters:
  - name: serviceConnection
    type: string
    default: 'ado-sp'
  - name: agentPool
    type: string
    default: 'container-pool'
  - name: dockerImageName
    type: string
    default: 'sample-dotnetcore-app'
  - name: dockerRegistry
    type: string
    default: 'dsopublic.azurecr.io'
  - name: aksResourceGroup
    type: string
    default: 'dso-k8s-001'
  - name: aksCluster
    type: string
    default: 'dso-ado-k8s-dev-001-aks'
  - name: helmChart
    type: string
    default: 'fdc-dotnetcore-app'




stages:
  - stage: BuildAndPush
    displayName: 'Build and Push Docker Image'
    jobs:
      - job: BuildAndPushJob
        displayName: 'Build and Push'
        pool: ${{ parameters.agentPool }}
        steps:
          #- checkout: self
          - task: AzureCLI@2
            displayName: 'Build and Push Docker Image'
            inputs:
              azureSubscription: ${{ parameters.serviceConnection }}
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo 'Building and pushing Docker image: ${{ parameters.dockerImageName }}:$(Build.BuildId)'
                az acr build --image ${{ parameters.dockerImageName }}:$(Build.BuildId) --registry ${{ parameters.dockerRegistry }} --file Dockerfile .

  - stage: DeployDev
    displayName: 'Deploy to Dev'
    dependsOn: BuildAndPush
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployDevJob
        displayName: 'Deploy to Dev'
        pool: ${{ parameters.agentPool }}
        environment: ${{ parameters.dockerImageName }}-dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: properties
                - script: |
                    # Add deployment steps for dev environment
                    pwd
                    ls -l
                  displayName: 'Deploy to Dev'
                - template: templates/steps/get-kubernetes-credentials.yaml
                  parameters:
                    serviceConnection: ${{ parameters.serviceConnection }}
                    aksResourceGroup: ${{ parameters.aksResourceGroup }}
                    aksCluster: ${{ parameters.aksCluster }}
                - task: AzureCLI@2
                  enabled: true
                  displayName: Helm upgrade
                  env:
                    KUBECONFIG: "$(Pipeline.Workspace)/kubeconfig"
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      kubectl get nodes
                      USER_NAME="00000000-0000-0000-0000-000000000000"
                      PASSWORD=$(az acr login --name dsopublic --expose-token --output tsv --query accessToken)

                      helm registry login dsopublic.azurecr.io \
                        --username $USER_NAME \
                        --password $PASSWORD
                        
                      helm install sample-dotnetcore-app oci://dsopublic.azurecr.io/helm/fdc-dotnetcore-app --version 0.1.0 --dry-run

  - stage: DeployTest
    displayName: 'Deploy to Test'
    dependsOn: DeployDev
    condition: false
    jobs:
      - deployment: DeployTestJob
        displayName: 'Deploy to Test'
        pool: ${{ parameters.agentPool }}
        environment: ${{ parameters.dockerImageName }}-test
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    # Add deployment steps for test environment
                  displayName: 'Deploy to Test'

  - stage: DeployUAT
    displayName: 'Deploy to UAT'
    dependsOn: DeployTest
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployUATJob
        displayName: 'Deploy to UAT'
        pool: ${{ parameters.agentPool }}
        environment: ${{ parameters.dockerImageName }}-uat
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    # Add deployment steps for UAT environment
                  displayName: 'Deploy to UAT'

  - stage: DeployProd
    displayName: 'Deploy to Prod'
    dependsOn: DeployUAT
    condition: false
    jobs:
      - deployment: DeployProdJob
        displayName: 'Deploy to Prod'
        pool: ${{ parameters.agentPool }}
        environment: ${{ parameters.dockerImageName }}-prod
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    # Add deployment steps for prod environment
                  displayName: 'Deploy to Prod'